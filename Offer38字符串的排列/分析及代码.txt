//  https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/
class Solution {
    /*
    dfs:
    当前固定位 x
    1,剪枝:若 c[i] 在 Set​ 中，代表其是重复字符，因此 “剪枝” ；
    2,将 c[i] 加入 Set​ ，以便之后遇到重复字符时剪枝；
    3,固定字符： 将字符 c[i] 和 c[x] 交换，即固定 c[i] 为当前位字符；
    4,开启下层递归： 调用 dfs(x + 1) ，即开始固定第 x + 1 个字符；
    5,还原交换： 将字符 c[i] 和 c[x] 交换（还原之前的交换）；
    */
    List<String> res = new LinkedList<>();
    char[] c;
    public String[] permutation(String s) {
        c = s.toCharArray();
        dfs(0);
        return res.toArray(new String[res.size()]);
    }
    //从当前位置进行dfs
    public void dfs(int x){
        if(x==c.length-1){
            res.add(String.valueOf(c));//添加一种排列方案
            return;
        }
        HashSet<Character> set = new HashSet<>();
        for(int i=x;i<c.length;i++){
            //1,如果重复就剪枝
            if(set.contains(c[i])) continue;
            //2,
            set.add(c[i]);
            //3,交换，将c[i]固定在第x位
            swap(i,x);
            //4,固定第x+1位
            dfs(x+1);
            //5,恢复交换
            swap(i,x);
        }
    }
    //交换两个位置的值
    public void swap(int a,int b){
        char temp=c[a];
        c[a]=c[b];
        c[b]=temp;
    }
}