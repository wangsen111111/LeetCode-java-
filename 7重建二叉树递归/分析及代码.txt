//链接：https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/
class Solution {
    HashMap<Integer,Integer> infixmap=new HashMap<>(); //标记中序遍历
    int[] preorder;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.preorder=preorder;
        //将中序遍历的值和索引放在infixMap中，方便获取左子树和右子数的数量和根节点的索引
        for(int i=0;i<inorder.length;i++){
            infixmap.put(inorder[i],i);
        }
        return recursion(0,0,preorder.length-1);

    }
    //前序遍历得到根节点，  中序左边界和右边界
    public TreeNode recursion(int pre_root,int leftEdge,int rightEdge){
        if(leftEdge>rightEdge) return null;
        //获取根节点
        TreeNode root=new TreeNode(preorder[pre_root]);
        //获取根节点的索引，方便获取左右子树的数量
        int rootIndex=infixmap.get(preorder[pre_root]);
        //左子树进行递归
        root.left=recursion(pre_root+1,leftEdge,rootIndex-1);
        //右子数进行递归
        //右子数根节点的索引=当前根节点索引+左子树数量+1
        root.right=recursion(pre_root+(rootIndex-leftEdge)+1,rootIndex+1,rightEdge);
        return root;
    }
}