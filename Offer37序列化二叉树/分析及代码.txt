//   https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/
 /*
通常使用的前序、中序、后序、层序遍历记录的二叉树的信息不完整，即唯一的输出序列可能对应着多种二叉树可能性。  
题目要求的 序列化 和 反序列化 是 可逆操作。因此，序列化的字符串应携带完整的二叉树信息 。
    */
public class Codec {
    /*
    借助队列，对二叉树做层序遍历，并将越过叶节点的 null 也打印出来。
    1,特例处理:若 root 为空，则直接返回空列表 "[]" ；
    2,初始化：队列 queue （包含根节点 root ）；序列化列表 res ；
    3,层序遍历：当 queue 为空时跳出；
        节点出队列，记为 node ；
        若 node 不为空：（1）打印字符串 node.val (2) 将左、右子节点加入 queue ；
        否则（若 node 为空）：打印字符串 "null" ；
    4,返回值： 拼接列表，用 ',' 隔开，首尾添加中括号；
    */
    public String serialize(TreeNode root) {
        //1,
         if(root == null) return "[]";
         //2,
         StringBuilder res = new StringBuilder("[");
         Queue<TreeNode> queue = new LinkedList<>();
         queue.add(root);
         //3,
        while(!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if(node != null) {
                res.append(node.val + ",");
                queue.add(node.left);
                queue.add(node.right);
            }
            else res.append("null,");
        }
        //4,
        res.deleteCharAt(res.length() - 1);
        res.append("]");
        return res.toString();
    }

    /*
    利用队列按层构建二叉树，借助一个指针i指向节点 node 的左、右子节点，每构建一个 node 的左、右子节点，指针i 就向右移动1位。
    1,特例处理:若 data 为空,直接返回 null
    2,初始化:序列化列表 vals （先去掉首尾中括号，再用逗号隔开），指针 i = 1 ，根节点 root （值为 vals[0] ），队列 queue（包含 root ）；
    3,按层构建： 当 queue 为空时跳出；
         节点出队，记为 node ；
         构建 node 的左子节点：node.left 的值为 vals[i] ，并将 node.left 入队；
         执行 i += 1 ；
         构建 node 的右子节点：node.left 的值为 vals[i] ，并将 node.left 入队；
         执行 i += 1 ；
    4,返回值： 返回根节点 root 即可；
    */
    public TreeNode deserialize(String data) {
        //1,
         if(data.equals("[]")) return null;
         //2,
         String[] vals = data.substring(1, data.length() - 1).split(",");
         TreeNode root = new TreeNode(Integer.parseInt(vals[0]));
         Queue<TreeNode> queue = new LinkedList<>();
         queue.add(root);
         int i = 1;
         //3,
          while(!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if(!vals[i].equals("null")) {
                node.left = new TreeNode(Integer.parseInt(vals[i]));
                queue.add(node.left);
            }
            i++;
            if(!vals[i].equals("null")) {
                node.right = new TreeNode(Integer.parseInt(vals[i]));
                queue.add(node.right);
            }
            i++;
        }
        //4,
        return root;
    }
}
