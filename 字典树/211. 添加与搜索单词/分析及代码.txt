//   链接：https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/
class WordDictionary {
    private Trie root;

    public WordDictionary() {
        root=new Trie();
    }

    public static void main(String[] args) {
        WordDictionary wordDictionary = new WordDictionary();
        wordDictionary.addWord("bad");
        wordDictionary.addWord("dad");
        wordDictionary.addWord("mad");
        System.out.println(wordDictionary.search("pad")); //false
        System.out.println(wordDictionary.search("bad")); //true
        System.out.println(wordDictionary.search(".ad")); //true
        System.out.println(wordDictionary.search("b..")); //true;
    }

    public void addWord(String word) {
        root.insert(word);
    }

    public boolean search(String word) {
        return dfs(word,0,root);
    }
    /*
   对于搜索单词，从字典树的根结点开始搜索。由于待搜索的单词可能包含点号，因此在搜索过程中需要考虑点号
   (1)如果当前字符是字母，则判断当前字符对应的子结点是否存在，如果子结点存在,则移动到子结点，继续搜索下一个字符，如果子结点不存在则说明单词不存在，返回false；
   (2)如果当前字符是点号，由于点号可以表示任何字母，因此需要对当前结点的所有非空子结点继续搜索下一个字符。
   重复上述步骤，直到返回false或搜索完给定单词的最后一个字符。
   如果搜索完给定的单词的最后一个字符，则当搜索到的最后一个结点的isEnd 为true 时，给定的单词存在。
   特别地，当搜索到点号时，只要存在一个非空子结点可以搜索到给定的单词，即返回true。
   */
    private boolean dfs(String word,int index,Trie node){
        if(index==word.length()){
            return node.isEnd();
        }
        char ch=word.charAt(index);
        if(Character.isLetter(ch)){
            int childrenIndex=ch-'a';
            Trie child=node.getChildren()[childrenIndex];
            if(child!=null&&dfs(word,index+1,child)){
                return true;
            }
        }else{
            for(int i=0;i<26;i++){
                Trie child=node.getChildren()[i];
                if(child!=null&&dfs(word,index+1,child)){
                    return true;
                }
            }
        }
        return false;
    }
}
class Trie {
    private Trie[] children;
    private boolean isEnd;

    public Trie() {
        children=new Trie[26];
        isEnd=false;
    }

    public void insert(String word) {
        Trie node=this;
        for(int i=0;i<word.length();i++){
            char ch=word.charAt(i);
            int index=ch-'a';
            if(node.children[index]==null){
                node.children[index]=new Trie();
            }
            node=node.children[index];
        }
        node.isEnd=true;
    }

    public Trie[] getChildren(){
        return children;
    }

    public boolean isEnd(){
        return isEnd;
    }
}
