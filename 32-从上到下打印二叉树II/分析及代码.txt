//链接：https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/
class Solution {
    /*
    BFS 循环： 当队列 queue 为空时跳出；
        1,新建一个临时列表 tmp ，用于存储当前层打印结果；
        2,当前层打印循环： 循环次数为当前层节点数（即队列 queue 长度）；
          出队： 队首元素出队，记为 node；
          打印： 将 node.val 添加至 tmp 尾部；
          添加子节点： 若 node 的左（右）子节点不为空，则将左（右）子节点加入队列 queue ；
        3,将当前层结果 tmp 添加入 res 。
    */
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<>();
        List<List<Integer>> res=new ArrayList<>();
        if(root!=null) queue.add(root);
        while(!queue.isEmpty()){
            //1,
            List<Integer> temp=new ArrayList<>();
            //2,
            for(int i=queue.size();i>0;i--){
                TreeNode node=queue.poll();
                temp.add(node.val);
                if(node.left!=null) queue.add(node.left);
                if(node.right!=null) queue.add(node.right);
            }
            res.add(temp);
        }
        return res;
    }
}
